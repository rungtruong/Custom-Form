.js .file-up {
	display: flex;
	flex-wrap: wrap;
	margin-bottom: 1.25em;
}

.js .file-up__label {
	display: inline-block;
	position: relative;
	vertical-align: middle;
}


.js .file-up__label__text {
	border: 1px solid #666;
	display: inline-block;
	padding: .5em;
}

/**
 * Don't want to use the 'standard' method
 * for visually hiding the native file upload
 * with CSS, because setting the form control
 * to 1px height/width will cause VoiceOver to
 * inaccurately announce the state of the
 * form control (e.g. VO will not announce
 * whether there are files selected or not.)
 */
.js .file-up [type="file"] {
	font-size: .1px;
	height: 100%;
	left: 0;
	min-width: 100%;
	opacity: 0;
	position: absolute;
	top: 0;
}

.js .file-up__output {
	display: inline-block;
	font-size: .825em;
	max-width: 100%;
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

.js .file-up__output {
	border: 1px solid #ddd;
	padding: .75em;
	vertical-align: top;
}

.js .file-up--compact .file-up__output {
	display: none;
}


/**
 * States
 *
 * A focus within class is used to provide a visual
 * indicator when the hidden form control has
 * received keyboard focus.
 */
.js .file-up__label:hover .file-up__label__text,
.js .file-up__label.focus-within .file-up__label__text {
	border: 1px solid #111;
	outline: 2px solid #333;
	outline-offset: 2px;
}


/**
 * Since the input[type="file"] comes after the label,
 * relying solely on the [disabled] set to the <input>
 * would be insufficient. If a [disabled] is found on
 * the <input> this class will be added to the
 * wrapping element of the styled form control.
 */
[data-file-input].is-disabled {
	opacity: .5;
	pointer-events: none;
}
